#!/usr/bin/python
# -*- coding: utf-8 -*-
import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.filters import Text
from aiogram.types import CallbackQuery

from config import API_TOKEN, admin, admin1
from src.keyboard import *
import function as func
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from src.states import *

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

@dp.message_handler(commands=['start'])
async def start(message):
    func.join(message.chat.id)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n\n"
                         "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π —É—Å–ª—É–≥–µ.\n\n"
                         "–ú—ã üöó –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–∞–ª—å—è–Ω—ã –Ω–∞ –¥–æ–º, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –±–∞–Ω–∫–µ—Ç..... –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ú–û.\n"
                         "üì¶–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø*, –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ú–ö–ê–î, —É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n"
                         "–ö–∞–ª—å—è–Ω –∑–∞–±–∏—Ä–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è.\n"
                         "–ö–∞–ª—å—è–Ω –º–æ–∂–Ω–æ –Ω–µ –º—ã—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–π—Ç–µ –≤–æ–¥—É –∏ –ø–æ–ª–æ–∂–∏—Ç–µ –≤ —Å—É–º–∫—É.\n\n"
                         "‚ö†Ô∏è–û—Ç–≤–µ—á–∞—è –∑–¥–µ—Å—å, –í—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                         "your-hookah.ru/personal-data.html\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:", reply_markup=main_menu())

# –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–ó–∫–∞–∑–∞—Ç—å" —Ç–æ –Ω–∞–¥–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ –Ω—É–∂–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(text="–ó–∞–∫–∞–∑–∞—Ç—å")
async def order(message):
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ –Ω—É–∂–Ω–æ?", reply_markup=remove_kb())
    await UserState.wait_number_hoockah.set()
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤, –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏ –æ–Ω —Ö–æ—á–µ—Ç —Ç–∞–±–∞–∫, –ø–æ –¥–µ—Å—Ç–∏–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_number_hoockah)
async def order(message, state: FSMContext):
    await state.update_data(number_hoockah=message.text)
    await message.answer("–ö–∞–∫–æ–π –∫—Ä–µ–ø–æ—Å—Ç–∏ —Ç–∞–±–∞–∫?", reply_markup=remove_kb())
    await UserState.wait_tobacco_strength.set()
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫—Ä–µ–ø–æ—Å—Ç—å —Ç–∞–±–∞–∫–∞, –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –≤–∫—É—Å —Ç–∞–±–∞–∫–∞ –æ–Ω —Ö–æ—á–µ—Ç –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_tobacco_strength)
async def order(message, state: FSMContext):
    await state.update_data(tobacco_strength=message.text)
    await message.answer("–ö–∞–∫–æ–π –≤–∫—É—Å —Ç–∞–±–∞–∫–∞?", reply_markup=remove_kb())
    await UserState.wait_tobacco_flavor.set()
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤–∫—É—Å —Ç–∞–±–∞–∫–∞, –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ 3 —á–∞—à–∏ –≤ –∫–æ–º–ø–ª–µ–∫—Ç –æ–Ω —Ö–æ—á–µ—Ç –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_tobacco_flavor)
async def order(message, state: FSMContext):
    await state.update_data(tobacco_flavor=message.text)
    await message.answer("–ö–∞–∫—É—é —á–∞—à—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –∫–æ–º–ø–ª–µ–∫—Ç?", reply_markup=chashi())
    await UserState.wait_cup.set()
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞–∫–∏–µ 3 —á–∞—à–∏ –≤ –∫–æ–º–ø–ª–µ–∫—Ç –æ–Ω —Ö–æ—á–µ—Ç, –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_cup)
async def order(message, state: FSMContext):
    await state.update_data(cup=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
                         "–ö–í–ê–†–¢–ò–†–ê\n"
                         "–≠–¢–ê–ñ\n"
                         "–ü–û–î–¨–ï–ó–î\n"
                         "–î–û–ú–û–§–û–ù\n", reply_markup=cancel())
    await UserState.wait_info_about_order.set()
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_info_about_order)
async def order(message, state: FSMContext):
    await state.update_data(info_about_order=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel())
    await UserState.wait_phone_number.set()
#–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–¥–æ —Å–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –æ–± —É–¥–æ–±–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=UserState.wait_phone_number)
async def order(message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.answer("–ö–æ–≥–¥–∞ –í–∞–º —É–¥–æ–±–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–ª—å—è–Ω?", reply_markup=time())
    await UserState.wait_time.set()

# –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –≤—Å–µ —á—Ç–æ –æ–Ω –≤–≤–µ–ª –∏ –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
@dp.message_handler(state=UserState.wait_phone_number)
@dp.callback_query(Text(text=['yes', 'no']))
async def order(message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    data = await state.get_data()
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤: {data.get('number_hoockah')}\n"
                         f"–ö—Ä–µ–ø–æ—Å—Ç—å —Ç–∞–±–∞–∫–∞: {data.get('tobacco_strength')}\n"
                         f"–í–∫—É—Å —Ç–∞–±–∞–∫–∞: {data.get('tobacco_flavor')}\n"
                         f"–ß–∞—à–∞: {data.get('cup')}\n"
                         f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('info_about_order')}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get('phone_number')}\n"
                         f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('time')}\n\n"
                         f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=yes_or_no())
    await UserState.wait_correct.set()
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–î–∞" —Ç–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º

@dp.message_handler(state=UserState.wait_correct)
async def order(call, state: FSMContext):
    if '–î–∞' in call.data:
        await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=main_menu(), parse_mode='HTML')
        await state.finish()
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu(), parse_mode='HTML')
        await state.finish()
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ù–µ—Ç" —Ç–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=UserState.wait_correct)
async def order(call, state: FSMContext):
    if '–ù–µ—Ç' in call.data:
        await call.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", parse_mode='HTML', reply_markup=main_menu())
        await state.finish()
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu(), parse_mode='HTML')
        await state.finish()
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" —Ç–æ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
@dp.message_handler(content_types= ['text'], text = "–û—Ç–º–µ–Ω–∏—Ç—å")
async def order(message, state: FSMContext):
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_menu())
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)






